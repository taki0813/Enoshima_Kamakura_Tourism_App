// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model TouristSpot {
  id          String   @id @default(cuid())
  name        String
  description String
  area        String
  category    String
  tags        String // String[] から変更
  duration    Int
  difficulty  String
  lat         Float
  lng         Float
  openHours   String
  bestVisitTime String? // 追加: おすすめの訪問時間帯（例: "morning" | "afternoon" | "evening"）
  entranceFee Int
  image       String
  tips        String // String[] から変更
  coupons     Coupon[]
}

model Coupon {
  id          String   @id @default(cuid())
  couponId    String
  title       String
  description String
  discount    String
  validUntil  String
  spotId      String
  spotName    String
  isUsed      Boolean
  obtainedAt  DateTime @default(now())
  usedAt      DateTime?
  category    String
  isInstant   Boolean?
  spot        TouristSpot @relation(fields: [spotId], references: [id])
}

// NextAuth models + role support

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // 追加: ロール管理のためのフィールド
  role          String    @default("user")
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}